{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.9", "generated_at": "2024-10-01T02:48:39.295834Z", "invocation_id": "8bd0d5b7-6176-48b2-be1a-afd60e8a1b00", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T02:48:38.627318Z", "completed_at": "2024-10-01T02:48:38.627975Z"}, {"name": "execute", "started_at": "2024-10-01T02:48:38.630257Z", "completed_at": "2024-10-01T02:48:38.630269Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018661975860595703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.ga4_export_integration_tests.event_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T02:48:38.612700Z", "completed_at": "2024-10-01T02:48:38.630989Z"}, {"name": "execute", "started_at": "2024-10-01T02:48:38.631312Z", "completed_at": "2024-10-01T02:48:38.631316Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019936084747314453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4_export.stg_ga4_export__event_base", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"stg_ga4_export__event_base\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T02:48:38.635208Z", "completed_at": "2024-10-01T02:48:38.882753Z"}, {"name": "execute", "started_at": "2024-10-01T02:48:38.883118Z", "completed_at": "2024-10-01T02:48:38.883122Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.26846790313720703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4_export.stg_ga4_export__event", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"stg_ga4_export__event_base\"\n\n    \n    where 'date' >= \n\n\n\n    \n\n    \n\n    cast('2024-01-01' as date) + ((interval '1 day') * (-7))\n\n\n\n\n    \n\n),\n\nfields as (\n\n    select\n        \n    cast(null as TEXT) as \n    \n    _fivetran_id\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    bundle_sequence_id\n    \n , \n    cast(null as TEXT) as event_date , \n    cast(null as TEXT) as \n    \n    device_category\n    \n , \n    cast(null as TEXT) as \n    \n    geo_city\n    \n , \n    cast(null as TEXT) as \n    \n    geo_country\n    \n , \n    cast(null as TEXT) as \n    \n    geo_region\n    \n , \n    cast(null as TEXT) as event_name , \n    cast(null as TEXT) as \n    \n    platform\n    \n , \n    cast(null as timestamp) as event_timestamp , \n    cast(null as TEXT) as \n    \n    traffic_source_name\n    \n , \n    cast(null as TEXT) as \n    \n    traffic_source_medium\n    \n , \n    cast(null as TEXT) as \n    \n    traffic_source_source\n    \n , \n    cast(null as TEXT) as \n    \n    collected_traffic_source_manual_medium\n    \n , \n    cast(null as TEXT) as \n    \n    collected_traffic_source_manual_source\n    \n , \n    cast(null as timestamp) as \n    \n    user_first_touch_timestamp\n    \n , \n    cast(null as TEXT) as \n    \n    user_id\n    \n , \n    cast(null as TEXT) as \n    \n    user_pseudo_id\n    \n , \n    cast(null as float) as \n    \n    value_in_usd\n    \n , \n    cast(null as float) as \n    \n    ecommerce_purchase_revenue_in_usd\n    \n , \n    cast(null as float) as \n    \n    ecommerce_refund_value_in_usd\n    \n , \n    cast(null as float) as \n    \n    ecommerce_purchase_revenue\n    \n , \n    cast(null as float) as \n    \n    ecommerce_refund_value\n    \n , \n    cast(null as integer) as \n    \n    ecommerce_total_item_quantity\n    \n , \n    cast(null as TEXT) as \n    \n    ecommerce_transaction_id\n    \n , \n    cast(null as TEXT) as \n    \n    event_dimensions_hostname\n    \n , \n    cast(null as integer) as \n    \n    param_video_duration\n    \n , \n    cast(null as float) as \n    \n    param_percent_scrolled\n    \n , \n    cast(null as TEXT) as \n    \n    param_campaign\n    \n , \n    cast(null as TEXT) as \n    \n    param_gclid\n    \n , \n    cast(null as TEXT) as \n    \n    param_medium\n    \n , \n    cast(null as TEXT) as \n    \n    param_source\n    \n , \n    cast(null as TEXT) as \n    \n    param_ga_session_id\n    \n , \n    cast(null as float) as \n    \n    param_ga_session_number\n    \n , \n    cast(null as float) as \n    \n    param_engagement_time_msec\n    \n , \n    cast(null as TEXT) as \n    \n    param_engaged_session_event\n    \n , \n    cast(null as boolean) as \n    \n    param_session_engaged\n    \n , \n    cast(null as TEXT) as \n    \n    stream_id\n    \n , \n    cast(null as boolean) as \n    \n    is_intraday\n    \n \n\n\n        -- Using source relation to account for different union schemas and databases if needed\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n\n),\n\nfinal_pre as (\n    \n    select\n        cast(_fivetran_id as TEXT) as fivetran_id,\n        concat(user_pseudo_id, '_', event_timestamp, '_', event_name, '_', bundle_sequence_id) as event_id,\n        cast(_fivetran_synced as timestamp) as fivetran_synced,\n        cast(bundle_sequence_id as TEXT) as bundle_sequence_id,\n        event_date, -- renamed in macro due to reserved word\n        device_category,\n        geo_city,\n        geo_country,\n        geo_region,\n        event_name, -- renamed in macro due to reserved word\n        platform,\n        cast(event_timestamp as timestamp) as event_timestamp, -- renamed in macro due to reserved word\n        coalesce(collected_traffic_source_manual_medium,traffic_source_medium, param_medium) as source_medium,\n        coalesce(collected_traffic_source_manual_source,traffic_source_source, param_source) as source_source,\n        cast(user_first_touch_timestamp as timestamp) as user_first_touch_timestamp,\n        cast(user_id as TEXT) as user_id,\n        cast(user_pseudo_id as TEXT) as user_pseudo_id,\n        cast(value_in_usd as float) as event_value_usd,\n        cast(ecommerce_purchase_revenue_in_usd as float) as ecommerce_purchase_revenue_usd,\n        cast(ecommerce_purchase_revenue as float) as ecommerce_purchase_revenue,\n        cast(ecommerce_refund_value_in_usd as float) as ecommerce_refund_value_usd,\n        cast(ecommerce_refund_value as float) as ecommerce_refund_value,\n        cast(ecommerce_total_item_quantity as float) as ecommerce_total_item_quantity,\n        cast(ecommerce_transaction_id as TEXT) as ecommerce_transaction_id,\n        event_dimensions_hostname,\n        cast(param_video_duration as float) as param_video_duration,\n        cast(param_percent_scrolled as float) as param_percent_scrolled,\n        param_campaign as param_campaign,\n        cast(param_gclid as TEXT) as param_gclid,\n        param_medium,\n        param_source,\n        cast(param_ga_session_id as TEXT) as param_ga_session_id,\n        param_ga_session_number,\n        cast(param_engagement_time_msec as float) as param_engagement_time_msec,\n        param_engaged_session_event,\n        param_session_engaged,\n        cast(stream_id as TEXT) as stream_id,\n        is_intraday,\n        source_relation\n\n    from fields\n\n),\n\nexclude_intraday as (\n\n    select\n        *\n    from final_pre\n    where is_intraday = false\n\n)\n\nselect\n    *\nfrom exclude_intraday", "relation_name": "\"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"stg_ga4_export__event\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T02:48:38.915160Z", "completed_at": "2024-10-01T02:48:38.917612Z"}, {"name": "execute", "started_at": "2024-10-01T02:48:38.918257Z", "completed_at": "2024-10-01T02:48:38.918261Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015231132507324219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4_export.int_ga4_export__user_first_event", "compiled": true, "compiled_code": "with user_first_data as (\n    -- identify the first event for each user based on the minimum event_timestamp\n    select\n        user_pseudo_id,\n        min(event_timestamp) as first_event_timestamp\n    from\n        \"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"stg_ga4_export__event\"\n    where\n        event_name = 'session_start'\n    group by\n        user_pseudo_id\n),\n\nfirst_user_source_medium as (\n    -- use row_number() to prioritize non-null source/medium, ensuring one record per user\n    select\n        events.user_pseudo_id,\n        lower(events.source_source) as first_user_source,\n        lower(events.source_medium) as first_user_medium,\n        row_number() over (\n            partition by events.user_pseudo_id\n            order by \n                -- just in case, prioritize rows with non-null source_source and source_medium, since there can be multiple events with the same event_timestamp\n                case \n                when events.source_source is not null and events.source_medium is not null then 1\n                else 2\n                end,\n                events.event_timestamp\n        ) as row_num\n    from\n        \"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"stg_ga4_export__event\" as events\n    join\n        user_first_data as ufd\n        on events.user_pseudo_id = ufd.user_pseudo_id\n        and events.event_timestamp = ufd.first_event_timestamp\n)\n\nselect\n    user_pseudo_id,\n    first_user_source,\n    first_user_medium\nfrom first_user_source_medium\nwhere row_num = 1 -- select only the first record per user", "relation_name": "\"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"int_ga4_export__user_first_event\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T02:48:38.919572Z", "completed_at": "2024-10-01T02:48:38.924663Z"}, {"name": "execute", "started_at": "2024-10-01T02:48:38.925045Z", "completed_at": "2024-10-01T02:48:38.925049Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006273031234741211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ga4_export.unique_stg_ga4_export__event_fivetran_id.b28df8fec4", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    fivetran_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"stg_ga4_export__event\"\nwhere fivetran_id is not null\ngroup by fivetran_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T02:48:38.908993Z", "completed_at": "2024-10-01T02:48:39.112709Z"}, {"name": "execute", "started_at": "2024-10-01T02:48:39.113987Z", "completed_at": "2024-10-01T02:48:39.113991Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.21262598037719727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4_export.ga4_export__events_report", "compiled": true, "compiled_code": "\n\nwith events_base as (\n\n    select * \n    from \"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"stg_ga4_export__event\"\n\n    \n    where event_date >= \n\n\n\n    \n\n    \n\n    cast('2024-01-01' as date) + ((interval '1 day') * (-7))\n\n\n\n\n    \n\n),\n\nevents_report as (\n    \n    select\n        event_date,\n        event_name,\n        source_relation,\n        count(event_id) as event_count,\n        round((count(event_id) / nullif(count(distinct user_pseudo_id),0)) ,2) as event_count_per_user,\n        coalesce(sum(ecommerce_purchase_revenue),0) as total_revenue,\n        count(distinct user_pseudo_id) as total_users\n\n    from events_base\n    group by 1, 2, 3\n\n)\n\nselect\n    *,\n    md5(cast(coalesce(cast(event_date as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(event_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_key\nfrom events_report", "relation_name": "\"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"ga4_export__events_report\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T02:48:38.912051Z", "completed_at": "2024-10-01T02:48:39.112215Z"}, {"name": "execute", "started_at": "2024-10-01T02:48:39.113495Z", "completed_at": "2024-10-01T02:48:39.113507Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.21263504028320312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4_export.int_ga4_export__derived_event_fields", "compiled": true, "compiled_code": "\n\nwith event_base as (\n    select *\n    from \"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"stg_ga4_export__event\"\n\n    \n    where event_date >= \n\n\n\n    \n\n    \n\n    cast('2024-01-01' as date) + ((interval '1 day') * (-7))\n\n\n\n\n    \n\n), lagged_events as (\n\n    select \n        *,\n        lag(event_timestamp) over (partition by user_pseudo_id, platform order by event_timestamp) as previous_event_timestamp\n\n    from event_base\n\n), sessionized_events as (\n\n    select\n        *,\n        -- Only calculate for 'user_engagement' events\n        case \n            when event_name = 'user_engagement' \n                and lag(event_timestamp) over (partition by user_pseudo_id order by event_timestamp) is not null \n            then \n                \n        (\n        (\n        (\n        ((event_timestamp)::date - (previous_event_timestamp)::date)\n     * 24 + date_part('hour', (event_timestamp)::timestamp) - date_part('hour', (previous_event_timestamp)::timestamp))\n     * 60 + date_part('minute', (event_timestamp)::timestamp) - date_part('minute', (previous_event_timestamp)::timestamp))\n     * 60 + floor(date_part('second', (event_timestamp)::timestamp)) - floor(date_part('second', (previous_event_timestamp)::timestamp)))\n     * 1000 -- Convert to milliseconds\n            else null\n        end as derived_engagement_time_msec,\n\n        -- Create boolean for whether event is user_engagement to use in next CTE for deriving engaged_session\n        cast(case\n            when event_name = 'user_engagement' \n            then 1 else 0\n        end as boolean) as is_engaged_event,\n\n        -- Generate session index based on 30-minute inactivity\n        sum(\n            case \n                -- check time difference in minutes\n                when \n        (\n        (\n        ((event_timestamp)::date - (previous_event_timestamp)::date)\n     * 24 + date_part('hour', (event_timestamp)::timestamp) - date_part('hour', (previous_event_timestamp)::timestamp))\n     * 60 + date_part('minute', (event_timestamp)::timestamp) - date_part('minute', (previous_event_timestamp)::timestamp))\n     > 30 \n                    or previous_event_timestamp is null\n                then 1 \n                else 0 \n            end\n        ) over (partition by user_pseudo_id, platform order by event_timestamp) as session_index\n\n    from lagged_events\n\n), final_sessionized as (\n\n    select\n        *,\n        -- Coalesce param_engagement_time_msec or use the derived_engagement_time_msec as engagement_time in milliseconds\n        coalesce(param_engagement_time_msec,derived_engagement_time_msec) as engagement_time_msec,\n        coalesce(param_session_engaged,is_engaged_event) as is_session_engaged,\n        -- Coalesce param_ga_session_id or create session_id from session_index\n        concat(user_pseudo_id, '_', coalesce(param_ga_session_id, concat(platform, '_', session_index)) ) as session_id -- user_pseudo_id and session_id\n\n    from sessionized_events se\n\n)\n\nselect *\nfrom final_sessionized", "relation_name": "\"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"int_ga4_export__derived_event_fields\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T02:48:38.904441Z", "completed_at": "2024-10-01T02:48:39.112477Z"}, {"name": "execute", "started_at": "2024-10-01T02:48:39.113764Z", "completed_at": "2024-10-01T02:48:39.113768Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.21380090713500977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4_export.ga4_export__conversions_report", "compiled": true, "compiled_code": "\n\n\n\n-- stipulate the names of your key events in your dbt_project.yml.\n\nwith events_base as (\n\n    select * \n    from \"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"stg_ga4_export__event\"\n    where event_name in ('click')\n\n    \n    and event_date >= \n\n\n\n    \n\n    \n\n    cast('2024-01-01' as date) + ((interval '1 day') * (-7))\n\n\n\n\n    \n\n),\n\nconversions_report as (\n    \n    select\n        event_date,\n        event_name,\n        source_relation,\n        count(event_id) as key_events,\n        coalesce(sum(ecommerce_purchase_revenue),0) as total_revenue,\n        count(distinct user_pseudo_id) as total_users\n\n    from events_base\n    group by 1, 2, 3\n\n)\n\nselect\n    *,\n    md5(cast(coalesce(cast(event_date as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(event_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_key\nfrom conversions_report", "relation_name": "\"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"ga4_export__conversions_report\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T02:48:39.119297Z", "completed_at": "2024-10-01T02:48:39.137795Z"}, {"name": "execute", "started_at": "2024-10-01T02:48:39.139048Z", "completed_at": "2024-10-01T02:48:39.139074Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.022338151931762695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ga4_export.not_null_ga4_export__events_report_unique_key.0715a29c13", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_key\nfrom \"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"ga4_export__events_report\"\nwhere unique_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T02:48:39.124741Z", "completed_at": "2024-10-01T02:48:39.138041Z"}, {"name": "execute", "started_at": "2024-10-01T02:48:39.139302Z", "completed_at": "2024-10-01T02:48:39.139307Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.022464990615844727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ga4_export.unique_ga4_export__events_report_unique_key.e450adc32b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    unique_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"ga4_export__events_report\"\nwhere unique_key is not null\ngroup by unique_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T02:48:39.142207Z", "completed_at": "2024-10-01T02:48:39.148441Z"}, {"name": "execute", "started_at": "2024-10-01T02:48:39.149219Z", "completed_at": "2024-10-01T02:48:39.149227Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008763790130615234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4_export.int_ga4_export__sessions_report", "compiled": true, "compiled_code": "\n\nwith derived_event_fields as (\n    select *\n    from \"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"int_ga4_export__derived_event_fields\"\n),\n\nsessions_aggregate as (\n    -- Aggregate session-level data\n    select\n        session_id,\n        min(event_timestamp) as session_start_time,\n        max(event_timestamp) as session_end_time,\n        sum(engagement_time_msec) / 1000 as total_session_engagement_time_sec,\n        count(event_id) as total_events,\n        max(case when is_session_engaged then 1 else 0 end) as is_engaged_session\n    from derived_event_fields\n    group by session_id\n)\n\nselect *\nfrom sessions_aggregate", "relation_name": "\"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"int_ga4_export__sessions_report\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T02:48:39.145800Z", "completed_at": "2024-10-01T02:48:39.148671Z"}, {"name": "execute", "started_at": "2024-10-01T02:48:39.149415Z", "completed_at": "2024-10-01T02:48:39.149418Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008887767791748047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ga4_export.not_null_ga4_export__conversions_report_unique_key.9ff84fe2d6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_key\nfrom \"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"ga4_export__conversions_report\"\nwhere unique_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T02:48:39.151237Z", "completed_at": "2024-10-01T02:48:39.154196Z"}, {"name": "execute", "started_at": "2024-10-01T02:48:39.154561Z", "completed_at": "2024-10-01T02:48:39.154567Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0041048526763916016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ga4_export.unique_ga4_export__conversions_report_unique_key.8206562765", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    unique_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"ga4_export__conversions_report\"\nwhere unique_key is not null\ngroup by unique_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T02:48:39.126837Z", "completed_at": "2024-10-01T02:48:39.271242Z"}, {"name": "execute", "started_at": "2024-10-01T02:48:39.271635Z", "completed_at": "2024-10-01T02:48:39.271642Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.1543259620666504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4_export.ga4_export__traffic_acquisition_session_source_medium_report", "compiled": true, "compiled_code": "-- traffic_acquisition_session_source_medium_report\n\n\nwith derived_event_fields as (\n\n    select * \n    from \"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"int_ga4_export__derived_event_fields\"\n    -- made incremental upstream\n\n    \n    where event_date >= \n\n\n\n    \n\n    \n\n    cast('2024-01-01' as date) + ((interval '1 day') * (-7))\n\n\n\n\n    \n\n),\n\ntraffic_acquisition_report as (\n    \n    select\n        event_date,\n        source_relation,\n        source_medium as session_medium,\n        source_source as session_source,\n        count(distinct case when is_session_engaged then session_id end) as engaged_sessions,\n        count(distinct session_id) as total_sessions,\n        round(cast(count(distinct case when is_session_engaged then session_id end)/ nullif(count(distinct session_id),0) as numeric(28,6) ) ,2) as engagement_rate,\n        count(event_id) as event_count,\n        round(cast((count(event_id)) / nullif(count(distinct session_id),0) as numeric(28,6) ), 2) as events_per_session,\n        count(case when event_name in ('click') then event_id end) as key_events, -- stipulate the names of your key events in your dbt_project.yml.\n        coalesce(sum(ecommerce_purchase_revenue),0) as total_revenue,\n        count(distinct user_pseudo_id) as total_users,\n        round(cast(sum(case when is_session_engaged then engagement_time_msec else 0 end)/ nullif(count(distinct session_id),0) as numeric(28,6) ), 2) as user_engagement_duration\n\n    from derived_event_fields\n    group by 1, 2, 3, 4\n\n)\n\nselect \n    *,\n    md5(cast(coalesce(cast(event_date as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(session_medium as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(session_source as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_key\nfrom traffic_acquisition_report", "relation_name": "\"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"ga4_export__traffic_acquisition_session_source_medium_report\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T02:48:39.274085Z", "completed_at": "2024-10-01T02:48:39.278570Z"}, {"name": "execute", "started_at": "2024-10-01T02:48:39.279324Z", "completed_at": "2024-10-01T02:48:39.279329Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006770133972167969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ga4_export.not_null_ga4_export__traffic_acquisition_session_source_medium_report_unique_key.abd827c84d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_key\nfrom \"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"ga4_export__traffic_acquisition_session_source_medium_report\"\nwhere unique_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T02:48:39.276334Z", "completed_at": "2024-10-01T02:48:39.278764Z"}, {"name": "execute", "started_at": "2024-10-01T02:48:39.279515Z", "completed_at": "2024-10-01T02:48:39.279519Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006858110427856445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ga4_export.unique_ga4_export__traffic_acquisition_session_source_medium_report_unique_key.57a4a8770f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    unique_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"ga4_export__traffic_acquisition_session_source_medium_report\"\nwhere unique_key is not null\ngroup by unique_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T02:48:39.132360Z", "completed_at": "2024-10-01T02:48:39.284181Z"}, {"name": "execute", "started_at": "2024-10-01T02:48:39.284575Z", "completed_at": "2024-10-01T02:48:39.284580Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1669299602508545, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4_export.ga4_export__user_acquisition_first_user_source_medium_report", "compiled": true, "compiled_code": "-- user_acquisition_first_user_source_medium_report\n\n\nwith derived_event_fields as (\n\n    select *\n    from \"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"int_ga4_export__derived_event_fields\"\n        -- made incremental upstream\n\n    \n    where event_date >= \n\n\n\n    \n\n    \n\n    cast('2024-01-01' as date) + ((interval '1 day') * (-7))\n\n\n\n\n    \n\n), user_first_event as (\n\n    select *\n    from \"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"int_ga4_export__user_first_event\"\n\n), user_acquisition_report as (\n    \n    select\n        event_date,\n        source_relation,\n        user_first_event.first_user_medium,\n        user_first_event.first_user_source,\n        count(distinct case when is_session_engaged then session_id end) as engaged_sessions,\n        round(cast(count(distinct case when is_session_engaged then session_id end)/ nullif(count(distinct session_id),0) as numeric(28,6) ),2) as engagement_rate,\n        count(event_id) as event_count,\n        count(case when event_name in ('click') then event_id end) as key_events, -- stipulate the names of your key events in your dbt_project.yml.\n        count(distinct case when event_name = 'first_visit' then derived_event_fields.user_pseudo_id end) as new_users,\n        count(distinct derived_event_fields.user_pseudo_id) as total_users,\n        coalesce(sum(ecommerce_purchase_revenue),0) as total_revenue,\n        round(cast(sum(case when is_session_engaged then engagement_time_msec else 0 end)/ nullif(count(distinct session_id),0) as numeric(28,6)), 2) as user_engagement_duration\n\n\n    from derived_event_fields\n    left join user_first_event\n        on derived_event_fields.user_pseudo_id = user_first_event.user_pseudo_id\n\n    group by 1, 2, 3, 4\n\n)\n\nselect\n    *,\n    md5(cast(coalesce(cast(event_date as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(first_user_medium as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(first_user_source as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_key\nfrom user_acquisition_report", "relation_name": "\"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"ga4_export__user_acquisition_first_user_source_medium_report\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T02:48:39.287103Z", "completed_at": "2024-10-01T02:48:39.292530Z"}, {"name": "execute", "started_at": "2024-10-01T02:48:39.293339Z", "completed_at": "2024-10-01T02:48:39.293344Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007830142974853516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ga4_export.not_null_ga4_export__user_acquisition_first_user_source_medium_report_unique_key.451e7cb92a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_key\nfrom \"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"ga4_export__user_acquisition_first_user_source_medium_report\"\nwhere unique_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-01T02:48:39.289439Z", "completed_at": "2024-10-01T02:48:39.292790Z"}, {"name": "execute", "started_at": "2024-10-01T02:48:39.293531Z", "completed_at": "2024-10-01T02:48:39.293534Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007935047149658203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ga4_export.unique_ga4_export__user_acquisition_first_user_source_medium_report_unique_key.c258abe53d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    unique_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ga4_export_integration_tests_1_ga4_export\".\"ga4_export__user_acquisition_first_user_source_medium_report\"\nwhere unique_key is not null\ngroup by unique_key\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 1.5969350337982178, "args": {"favor_state": false, "print": true, "use_colors": true, "log_path": "/Users/renee/Documents/dbt/ga4_export/dbt_ga4_export/integration_tests/logs", "defer": false, "introspect": true, "populate_cache": true, "empty_catalog": false, "log_level": "info", "log_format": "default", "select": [], "write_json": true, "quiet": false, "which": "generate", "log_file_max_bytes": 10485760, "log_format_file": "debug", "exclude": [], "project_dir": "/Users/renee/Documents/dbt/ga4_export/dbt_ga4_export/integration_tests", "profiles_dir": "/Users/renee/.dbt", "use_colors_file": true, "partial_parse": true, "cache_selected_only": false, "indirect_selection": "eager", "send_anonymous_usage_stats": true, "printer_width": 80, "strict_mode": false, "log_level_file": "debug", "vars": {}, "version_check": true, "partial_parse_file_diff": true, "macro_debugging": false, "invocation_command": "dbt docs generate -t postgres", "show_resource_report": false, "enable_legacy_logger": false, "target": "postgres", "static": false, "static_parser": true, "warn_error_options": {"include": [], "exclude": []}, "compile": true}}